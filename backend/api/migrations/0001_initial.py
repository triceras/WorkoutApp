# Generated by Django 5.1.3 on 2024-12-13 00:23

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.JSONField()),
                ('video_url', models.URLField(blank=True, null=True)),
                ('videoId', models.CharField(blank=True, max_length=50, null=True)),
                ('exercise_type', models.CharField(choices=[('strength', 'Strength'), ('flexibility', 'Flexibility'), ('balance', 'Balance'), ('endurance', 'Endurance'), ('power', 'Power'), ('speed', 'Speed'), ('agility', 'Agility'), ('plyometric', 'Plyometric'), ('core', 'Core'), ('cardio', 'Cardio')], default='strength', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='StrengthGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='YouTubeVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exercise_name', models.CharField(max_length=255, unique=True)),
                ('video_id', models.CharField(max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('thumbnail_url', models.URLField()),
                ('video_url', models.URLField()),
                ('cached_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExerciseLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sets', models.PositiveIntegerField()),
                ('reps', models.PositiveIntegerField()),
                ('weight', models.FloatField()),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.exercise')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('fitness_level', models.CharField(blank=True, choices=[('Beginner', 'Beginner'), ('Intermediate', 'Intermediate'), ('Advanced', 'Advanced')], max_length=20, null=True)),
                ('workout_time', models.PositiveIntegerField(blank=True, null=True)),
                ('workout_days', models.PositiveIntegerField(blank=True, null=True)),
                ('additional_goals', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, max_length=255, null=True, upload_to='profile_pictures/')),
                ('sex', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other'), ('Prefer not to say', 'Prefer not to say')], default='Prefer not to say', max_length=20)),
                ('membership_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('equipment', models.ManyToManyField(blank=True, to='api.equipment')),
                ('strength_goals', models.ManyToManyField(blank=True, to='api.strengthgoal')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TrainingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('comments', models.TextField(blank=True, null=True)),
                ('session_name', models.CharField(blank=True, max_length=100, null=True)),
                ('week_number', models.PositiveIntegerField(blank=True, null=True)),
                ('emoji_feedback', models.IntegerField(blank=True, choices=[(0, 'üòû Terrible'), (1, 'üòü Very Bad'), (2, 'üòê Bad'), (3, 'üôÇ Okay'), (4, 'üòÉ Good'), (5, 'üòÑ Awesome')], null=True)),
                ('duration', models.PositiveIntegerField(blank=True, null=True)),
                ('calories_burned', models.PositiveIntegerField(blank=True, null=True)),
                ('heart_rate_pre', models.PositiveIntegerField(blank=True, null=True)),
                ('heart_rate_post', models.PositiveIntegerField(blank=True, null=True)),
                ('workout_type', models.CharField(choices=[('Cardio', 'Cardio'), ('Light Cardio', 'Light Cardio'), ('Strength', 'Strength'), ('Flexibility', 'Flexibility'), ('Balance', 'Balance'), ('Endurance', 'Endurance'), ('Power', 'Power'), ('Speed', 'Speed'), ('Agility', 'Agility'), ('Plyometric', 'Plyometric'), ('Core', 'Core'), ('Chest & Triceps', 'Chest & Triceps'), ('Back & Biceps', 'Back & Biceps'), ('Shoulders & Abs', 'Shoulders & Abs'), ('Legs', 'Legs'), ('Full Body', 'Full Body'), ('Upper Body', 'Upper Body'), ('Lower Body', 'Lower Body'), ('Push', 'Push'), ('Pull', 'Pull'), ('HIIT', 'HIIT'), ('Recovery', 'Recovery')], max_length=20)),
                ('time', models.PositiveIntegerField(blank=True, null=True)),
                ('average_heart_rate', models.PositiveIntegerField(blank=True, null=True)),
                ('max_heart_rate', models.PositiveIntegerField(blank=True, null=True)),
                ('intensity', models.CharField(blank=True, max_length=50, null=True)),
                ('source', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('manual', 'Manual')], default='completed', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingSessionExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sets', models.PositiveIntegerField(blank=True, null=True)),
                ('reps', models.PositiveIntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('duration', models.PositiveIntegerField(blank=True, null=True)),
                ('calories_burned', models.PositiveIntegerField(blank=True, null=True)),
                ('average_heart_rate', models.PositiveIntegerField(blank=True, null=True)),
                ('max_heart_rate', models.PositiveIntegerField(blank=True, null=True)),
                ('intensity', models.CharField(blank=True, choices=[('Low', 'Low'), ('Moderate', 'Moderate'), ('High', 'High')], max_length=50, null=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.exercise')),
                ('training_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_session_exercises', to='api.trainingsession')),
            ],
        ),
        migrations.AddField(
            model_name='trainingsession',
            name='exercises',
            field=models.ManyToManyField(through='api.TrainingSessionExercise', to='api.exercise'),
        ),
        migrations.CreateModel(
            name='WorkoutLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('exercises', models.ManyToManyField(through='api.ExerciseLog', to='api.exercise')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='exerciselog',
            name='workout_log',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.workoutlog'),
        ),
        migrations.CreateModel(
            name='WorkoutPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('week_number', models.PositiveIntegerField(default=1)),
                ('plan_data', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='workout_plan', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='trainingsession',
            name='workout_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.workoutplan'),
        ),
        migrations.CreateModel(
            name='WorkoutSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workouts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(condition=models.Q(('email__isnull', False)), fields=('email',), name='unique_email_when_not_null'),
        ),
        migrations.AlterUniqueTogether(
            name='trainingsessionexercise',
            unique_together={('training_session', 'exercise')},
        ),
        migrations.AlterUniqueTogether(
            name='trainingsession',
            unique_together={('user', 'date', 'workout_type')},
        ),
    ]
