==== File: ./api/migrations/__init__.py ====


==== File: ./api/migrations/0002_userprofile.py ====
# Generated by Django 5.1.1 on 2024-09-26 03:50

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("age", models.PositiveIntegerField()),
                ("weight", models.FloatField()),
                ("height", models.FloatField()),
                (
                    "fitness_level",
                    models.CharField(
                        choices=[
                            ("Beginner", "Beginner"),
                            ("Intermediate", "Intermediate"),
                            ("Advanced", "Advanced"),
                        ],
                        max_length=20,
                    ),
                ),
                ("strength_goals", models.CharField(max_length=255)),
                ("additional_goals", models.TextField(blank=True, null=True)),
                ("equipment", models.CharField(max_length=255)),
                ("workout_time", models.PositiveIntegerField()),
                ("workout_days", models.PositiveIntegerField()),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]


==== File: ./api/migrations/0001_initial.py ====
# Generated by Django 5.1.1 on 2024-09-26 02:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Exercise",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("video_url", models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("age", models.PositiveIntegerField(null=True)),
                ("weight", models.FloatField(null=True)),
                ("height", models.FloatField(null=True)),
                ("fitness_level", models.CharField(max_length=50, null=True)),
                ("strength_goals", models.TextField(null=True)),
                ("equipment", models.TextField(null=True)),
                ("workout_time", models.CharField(max_length=50, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ExerciseLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sets", models.PositiveIntegerField()),
                ("reps", models.PositiveIntegerField()),
                ("weight", models.FloatField()),
                (
                    "exercise",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.exercise"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WorkoutLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                (
                    "exercises",
                    models.ManyToManyField(
                        through="api.ExerciseLog", to="api.exercise"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="exerciselog",
            name="workout_log",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.workoutlog"
            ),
        ),
        migrations.CreateModel(
            name="WorkoutPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("plan_data", models.JSONField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]


==== File: ./api/services.py ====
# api/services.py

import os
import replicate
import logging

logger = logging.getLogger(__name__)

REPLICATE_API_TOKEN = os.getenv('REPLICATE_API_TOKEN')

# Initialize the Replicate client
replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)

def generate_workout_plan(user_data):
    """
    Generate a personalized workout plan using the Replicate API and the specified model.

    Args:
        user_data (dict): A dictionary containing user information.

    Returns:
        dict: A dictionary containing the workout plan.
    """
    try:
        # Prepare the prompt for the AI model
        prompt = create_prompt(user_data)

        # Define the model and its version
        model = replicate.models.get("meta/meta-llama-3-70b-instruct")
        version = model.versions.list()[0]  # Get the latest version

        # Set the input parameters for the model
        inputs = {
            'prompt': prompt,
            'max_length': 1000,  # Adjust as needed
            'temperature': 0.7,  # Adjust for creativity
        }

        # Run the model prediction
        output = replicate_client.run(
            f"{model.owner}/{model.name}:{version.id}",
            input=inputs,
        )

        # Parse the AI response
        workout_plan = parse_ai_response(output)

        return workout_plan

    except Exception as e:
        logger.error(f"Error generating workout plan: {str(e)}")
        return None

def create_prompt(user_data):
    """
    Create a prompt for the AI model based on user data.

    Args:
        user_data (dict): User information.

    Returns:
        str: The prompt string.
    """
    prompt = (
        f"Create a personalized weekly workout plan for the following user:\n"
        f"- Age: {user_data.get('age')}\n"
        f"- Weight: {user_data.get('weight')} kg\n"
        f"- Height: {user_data.get('height')} cm\n"
        f"- Fitness Level: {user_data.get('fitness_level')}\n"
        f"- Strength Goals: {user_data.get('strength_goals')}\n"
        f"- Available Equipment: {user_data.get('equipment')}\n"
        f"- Workout Time Availability: {user_data.get('workout_time')} minutes per session, {user_data.get('workout_days')} days per week\n\n"
        f"Please provide a detailed workout plan including exercises, sets, reps, and any necessary instructions."
    )
    return prompt

def parse_ai_response(ai_response):
    """
    Parse the AI model's response into a structured format.

    Args:
        ai_response (str): The raw text output from the AI model.

    Returns:
        dict: A structured workout plan.
    """
    # For simplicity, assume the AI returns a JSON-like string
    # In practice, you may need to parse the text into a dictionary
    try:
        # If the AI returns JSON, parse it
        import json
        workout_plan = json.loads(ai_response)
    except json.JSONDecodeError:
        # If the AI returns plain text, you may need to implement custom parsing logic
        # Here, we'll just wrap the response in a dictionary
        workout_plan = {'plan': ai_response}
    
    return workout_plan


==== File: ./api/models.py ====
# api/models.py
from django.db import models
from django.contrib.auth.models import AbstractUser, User

class User(AbstractUser):
    age = models.PositiveIntegerField(null=True)
    weight = models.FloatField(null=True)
    height = models.FloatField(null=True)
    fitness_level = models.CharField(max_length=50, null=True)
    strength_goals = models.TextField(null=True)
    equipment = models.TextField(null=True)
    workout_time = models.CharField(max_length=50, null=True)
    # Add additional fields as needed

class Exercise(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    video_url = models.URLField(null=True, blank=True)
    # Additional fields

class WorkoutPlan(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    plan_data = models.JSONField()
    # Store plan details as JSON

class WorkoutLog(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    date = models.DateField()
    exercises = models.ManyToManyField(Exercise, through='ExerciseLog')

class ExerciseLog(models.Model):
    workout_log = models.ForeignKey(WorkoutLog, on_delete=models.CASCADE)
    exercise = models.ForeignKey(Exercise, on_delete=models.CASCADE)
    sets = models.PositiveIntegerField()
    reps = models.PositiveIntegerField()
    weight = models.FloatField()

class UserProfile(models.Model):
    FITNESS_LEVEL_CHOICES = [
        ('Beginner', 'Beginner'),
        ('Intermediate', 'Intermediate'),
        ('Advanced', 'Advanced'),
    ]

    user = models.OneToOneField(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField()
    weight = models.FloatField()
    height = models.FloatField()
    fitness_level = models.CharField(max_length=20, choices=FITNESS_LEVEL_CHOICES)
    strength_goals = models.CharField(max_length=255)
    additional_goals = models.TextField(blank=True, null=True)
    equipment = models.CharField(max_length=255)
    workout_time = models.PositiveIntegerField()
    workout_days = models.PositiveIntegerField()

    def __str__(self):
        return self.user.username


==== File: ./api/serializers.py ====
# api/serializers.py
from rest_framework import serializers
from .models import User, Exercise, WorkoutPlan, WorkoutLog, ExerciseLog, UserProfile
from django.contrib.auth import get_user_model

UserModel = get_user_model()

class ExerciseSerializer(serializers.ModelSerializer):
    class Meta:
        model = Exercise
        fields = '__all__'

class WorkoutPlanSerializer(serializers.ModelSerializer):
    class Meta:
        model = WorkoutPlan
        fields = '__all__'

class WorkoutLogSerializer(serializers.ModelSerializer):
    class Meta:
        model = WorkoutLog
        fields = '__all__'

class ExerciseLogSerializer(serializers.ModelSerializer):
    class Meta:
        model = ExerciseLog
        fields = '__all__'

class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        fields = [
            'name',
            'age',
            'weight',
            'height',
            'fitness_level',
            'strength_goals',
            'additional_goals',
            'equipment',
            'workout_time',
            'workout_days',
        ]

class UserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)
    confirm_password = serializers.CharField(write_only=True)
    userprofile = UserProfileSerializer()

    class Meta:
        model = User
        fields = ['username', 'password', 'confirm_password', 'userprofile']

    def validate(self, attrs):
        if attrs['password'] != attrs['confirm_password']:
            raise serializers.ValidationError({"password": "Passwords do not match."})
        return attrs

    def create(self, validated_data):
        profile_data = validated_data.pop('userprofile')
        validated_data.pop('confirm_password')  # Remove confirm_password since it's not a field on User
        user = User.objects.create_user(**validated_data)
        UserProfile.objects.create(user=user, **profile_data)
        return user


==== File: ./api/__init__.py ====


==== File: ./api/apps.py ====
from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "api"


==== File: ./api/admin.py ====
from django.contrib import admin

# Register your models here.


==== File: ./api/tests.py ====
from django.test import TestCase

# Create your tests here.


==== File: ./api/urls.py ====
# api/urls.py

from django.urls import path, include
from rest_framework import routers
from .views import (
    ExerciseViewSet,
    WorkoutPlanViewSet,
    WorkoutLogViewSet,
    current_user,
    CustomAuthToken,
    register_user,
    verify_token,
)

router = routers.DefaultRouter()
router.register(r'exercises', ExerciseViewSet)
router.register(r'workout-plans', WorkoutPlanViewSet, basename='workoutplan')
router.register(r'workout-logs', WorkoutLogViewSet, basename='workoutlog')

urlpatterns = [
    path('user/', current_user),
    path('auth/login/', CustomAuthToken.as_view()),
    path('register/', register_user, name='register'),
    path('auth/verify-token/', verify_token, name='verify-token'),
    path('', include(router.urls)),
]


==== File: ./api/workout_plan_generator.py ====
# api/workout_plan_generator.py

import replicate
import os
from django.conf import settings

def generate_workout_plan(user):
    # Access UserProfile attributes
    user_profile = user.userprofile
    workout_days = user_profile.workout_days
    workout_time = user_profile.workout_time
    fitness_level = user_profile.fitness_level
    strength_goals = user_profile.strength_goals
    equipment = user_profile.equipment

    # Prepare the input for the AI model
    model_input = {
        'workout_days': workout_days,
        'workout_time': workout_time,
        'fitness_level': fitness_level,
        'strength_goals': strength_goals,
        'equipment': equipment,
    }

    # Initialize Replicate client with your API token from an environment variable
    replicate_api_token = os.environ.get('REPLICATE_API_TOKEN')
    client = replicate.Client(api_token=replicate_api_token)

    # Specify the model you want to use (replace with your model's path)
    model = client.models.get("meta/meta-llama-3-70b-instruct")

    # Run the model prediction
    try:
        output = model.predict(**model_input)
        return output  # This should be the generated workout plan
    except replicate.exceptions.ModelNotFoundError as e:
        print(f"Error: Model not found - {e}")
        return None
    except replicate.exceptions.APIError as e:
        print(f"Error: API error - {e}")
        return None
    except Exception as e:
        print(f"Error generating workout plan: {e}")
        return None


==== File: ./api/views.py ====
# api/views.py

from rest_framework import viewsets, permissions, status
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from django.contrib.auth import get_user_model
from .services import generate_workout_plan

from .models import Exercise, WorkoutPlan, WorkoutLog
from .serializers import (
    ExerciseSerializer,
    WorkoutPlanSerializer,
    WorkoutLogSerializer,
    UserSerializer,
)
from .services import generate_workout_plan  # Import the AI integration function

import logging

logger = logging.getLogger(__name__)
User = get_user_model()


class ExerciseViewSet(viewsets.ModelViewSet):
    queryset = Exercise.objects.all()
    serializer_class = ExerciseSerializer
    permission_classes = [permissions.AllowAny]


class WorkoutPlanViewSet(viewsets.ModelViewSet):
    serializer_class = WorkoutPlanSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return WorkoutPlan.objects.filter(user=self.request.user)

    def create(self, request, *args, **kwargs):
        try:
            user = request.user
            user_data = {
                'age': user.age,
                'weight': user.weight,
                'height': user.height,
                'fitness_level': user.fitness_level,
                'strength_goals': user.strength_goals,
                'equipment': user.equipment,
                'workout_time': user.workout_time,
                'workout_days': user.workout_days,
                # Include other necessary fields
            }

            workout_plan = generate_workout_plan(user_data)

            if not workout_plan:
                logger.error('Failed to generate workout plan.')
                return Response(
                    {'detail': 'Failed to generate workout plan.'},
                    status=status.HTTP_500_INTERNAL_SERVER_ERROR,
                )

            plan = WorkoutPlan.objects.create(user=user, plan_data=workout_plan)
            serializer = self.get_serializer(plan)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        except Exception as e:
            logger.error(f'Error creating workout plan: {str(e)}')
            return Response(
                {'detail': 'An error occurred while creating the workout plan.'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )


class WorkoutLogViewSet(viewsets.ModelViewSet):
    serializer_class = WorkoutLogSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return WorkoutLog.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def current_user(request):
    try:
        serializer = UserSerializer(request.user)
        return Response(serializer.data)
    except Exception as e:
        logger.error(f'Error fetching user data: {str(e)}')
        return Response(
            {'detail': 'An error occurred while fetching user data.'},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR,
        )


class CustomAuthToken(ObtainAuthToken):
    def post(self, request, *args, **kwargs):
        try:
            serializer = self.serializer_class(
                data=request.data, context={'request': request}
            )
            serializer.is_valid(raise_exception=True)
            user = serializer.validated_data['user']
            token, _ = Token.objects.get_or_create(user=user)
            return Response({'token': token.key})
        except Exception as e:
            logger.error(f'Login error: {str(e)}')
            return Response(
                {'detail': 'Invalid credentials'},
                status=status.HTTP_400_BAD_REQUEST,
            )

@api_view(['POST'])
@permission_classes([AllowAny])
def register_user(request):
    serializer = UserSerializer(data=request.data)
    if serializer.is_valid():
        user = serializer.save()
        # Create a token for the new user
        token, created = Token.objects.get_or_create(user=user)
        return Response({'message': 'User registered successfully.', 'token': token.key}, status=status.HTTP_201_CREATED)
    else:
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_workout_plan(request):
    user = request.user
    try:
        # Ensure the user has an associated UserProfile
        if not hasattr(user, 'userprofile'):
            return Response({'error': 'UserProfile does not exist for this user.'}, status=400)

        user_profile = user.userprofile

        # Prepare the user_data dictionary
        user_data = {
            'age': user_profile.age,
            'weight': user_profile.weight,
            'height': user_profile.height,
            'fitness_level': user_profile.fitness_level,
            'strength_goals': user_profile.strength_goals,
            'equipment': user_profile.equipment,
            'workout_time': user_profile.workout_time,
            'workout_days': user_profile.workout_days,
        }

        # Generate the workout plan
        workout_plan = generate_workout_plan(user_data)

        if workout_plan:
            return Response({'workout_plan': workout_plan}, status=200)
        else:
            return Response({'error': 'Could not generate workout plan.'}, status=500)
    except Exception as e:
        print(f"Error generating workout plan: {e}")
        return Response({'error': str(e)}, status=500)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def verify_token(request):
    return Response({'message': 'Token is valid.'}, status=200)


==== File: ./manage.py ====
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myfitnessapp.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


==== File: ./myfitnessapp/asgi.py ====
"""
ASGI config for myfitnessapp project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myfitnessapp.settings")

application = get_asgi_application()


==== File: ./myfitnessapp/__init__.py ====


==== File: ./myfitnessapp/settings.py ====
"""
Django settings for myfitnessapp project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import logging.config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-jrja(o(se#%bw6r=p4%s3(x^-dme5t4qom31hu$lu0kldyqv7c"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'corsheaders',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'api',
    'rest_framework',
    'rest_framework.authtoken',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware", 
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "myfitnessapp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "myfitnessapp.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
]


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'fitnessdb',
        'USER': 'rafael',
        'PASSWORD': '1234',
        'HOST': 'localhost',
        'PORT': '',
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        # Optionally include SessionAuthentication
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', 
    'allauth.account.auth_backends.AuthenticationBackend',  
]


SITE_ID = 1

ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_AUTHENTICATION_METHOD = 'username'
ACCOUNT_EMAIL_REQUIRED = False

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
    }
}

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Keep the default configurations
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {name} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'WARNING',
            'propagate': True,
        },
        'api': {  # Your app's logger
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

AUTH_USER_MODEL = 'api.User'


==== File: ./myfitnessapp/urls.py ====
# myfitnessapp/urls.py

from django.contrib import admin
from django.urls import path, include
from api.views import get_workout_plan

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('api.urls')),  # Include the URLs from your api app
    path('api/workout-plan/', get_workout_plan, name='get-workout-plan'),
    path('auth/', include('allauth.urls')),
]


==== File: ./myfitnessapp/wsgi.py ====
"""
WSGI config for myfitnessapp project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myfitnessapp.settings")

application = get_wsgi_application()


